// This file is auto-generated by @hey-api/openapi-ts

/**
 * Serializer for vehicle availability statistics
 */
export type AvailabilityStats = {
    /**
     * Total number of vehicles in the database
     */
    total_vehicles: number;
    /**
     * Number of vehicles that have never been checked for availability
     */
    never_checked: number;
    /**
     * Number of vehicles that have been checked for availability at least once
     */
    checked_vehicles: number;
    /**
     * Number of vehicles that are currently available (latest check shows available or never checked)
     */
    available_vehicles: number;
    /**
     * Number of vehicles that are currently unavailable (latest check shows unavailable)
     */
    unavailable_vehicles: number;
    /**
     * Percentage of vehicles that are available (0-100)
     */
    availability_rate: number;
};

/**
 * * `sedan` - Sedan
 * * `hatchback` - Hatchback
 * * `coupe` - Coupe
 * * `convertible` - Convertible
 * * `suv` - SUV
 * * `wagon` - Wagon
 * * `pickup` - Pickup
 * * `van` - Van
 * * `minivan` - Minivan
 * * `crossover` - Crossover
 * * `crossroad` - Crossroad
 * * `roadster` - Roadster
 * * `limousine` - Limousine
 * * `truck` - Truck
 * * `bus` - Bus
 * * `other` - Other
 * * `unknown` - Unknown
 */
export type BodyTypeEnum = 'sedan' | 'hatchback' | 'coupe' | 'convertible' | 'suv' | 'wagon' | 'pickup' | 'van' | 'minivan' | 'crossover' | 'crossroad' | 'roadster' | 'limousine' | 'truck' | 'bus' | 'other' | 'unknown';

/**
 * Vehicle brand serializer
 */
export type Brand = {
    /**
     * Brand code
     */
    code: string;
    /**
     * Brand name
     */
    name: string;
    slug: string;
    /**
     * Is domestic brand
     */
    is_domestic?: boolean;
    /**
     * Country of origin
     */
    country_origin?: string | null;
    is_active?: boolean;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * * `white` - White
 * * `black` - Black
 * * `gray` - Gray
 * * `silver` - Silver
 * * `red` - Red
 * * `blue` - Blue
 * * `yellow` - Yellow
 * * `green` - Green
 * * `brown` - Brown
 * * `purple` - Purple
 * * `orange` - Orange
 * * `pink` - Pink
 * * `gold` - Gold
 * * `beige` - Beige
 * * `maroon` - Maroon
 * * `bronze` - Bronze
 * * `other` - Other
 * * `unknown` - Unknown
 */
export type ColorEnum = 'white' | 'black' | 'gray' | 'silver' | 'red' | 'blue' | 'yellow' | 'green' | 'brown' | 'purple' | 'orange' | 'pink' | 'gold' | 'beige' | 'maroon' | 'bronze' | 'other' | 'unknown';

/**
 * * `main_data` - Main Data
 * * `advertisement` - Advertisement
 * * `history` - History
 * * `inspection` - Inspection
 * * `warranty` - Warranty
 * * `options` - Options
 * * `photos` - Photos
 */
export type ContentTypeEnum = 'main_data' | 'advertisement' | 'history' | 'inspection' | 'warranty' | 'options' | 'photos';

/**
 * * `encar` - Encar
 * * `kcar` - K-Car
 * * `autowini` - Autowini
 */
export type DataSourceEnum = 'encar' | 'kcar' | 'autowini';

/**
 * * `excellent` - Excellent
 * * `very_good` - Very Good
 * * `good` - Good
 * * `fair` - Fair
 * * `poor` - Poor
 * * `salvage` - Salvage
 * * `flood` - Flood Damage
 * * `lemon` - Lemon
 * * `unknown` - Unknown
 */
export type EngineConditionEnum = 'excellent' | 'very_good' | 'good' | 'fair' | 'poor' | 'salvage' | 'flood' | 'lemon' | 'unknown';

/**
 * * `excellent` - Excellent
 * * `very_good` - Very Good
 * * `good` - Good
 * * `fair` - Fair
 * * `poor` - Poor
 * * `salvage` - Salvage
 * * `flood` - Flood Damage
 * * `lemon` - Lemon
 * * `unknown` - Unknown
 */
export type ExteriorConditionEnum = 'excellent' | 'very_good' | 'good' | 'fair' | 'poor' | 'salvage' | 'flood' | 'lemon' | 'unknown';

/**
 * * `gasoline` - Gasoline
 * * `diesel` - Diesel
 * * `hybrid` - Hybrid
 * * `plug_in_hybrid` - Plug-in Hybrid
 * * `electric` - Electric
 * * `hydrogen` - Hydrogen
 * * `cng` - CNG
 * * `lpg` - LPG
 * * `gasoline_electric` - Gasoline/Electric
 * * `diesel_electric` - Diesel/Electric
 * * `lpg_electric` - LPG/Electric
 * * `other` - Other
 * * `unknown` - Unknown
 */
export type FuelTypeEnum = 'gasoline' | 'diesel' | 'hybrid' | 'plug_in_hybrid' | 'electric' | 'hydrogen' | 'cng' | 'lpg' | 'gasoline_electric' | 'diesel_electric' | 'lpg_electric' | 'other' | 'unknown';

/**
 * HTML analysis serializer for V4 optimized model
 */
export type HtmlAnalysis = {
    listing_id: string;
    html_file_path?: string | null;
    json_file_path?: string | null;
    /**
     * English JSON file path
     */
    json_en_file_path?: string | null;
    /**
     * LLM analysis file path
     */
    llm_analysis_path?: string | null;
    /**
     * LLM summary file path
     */
    llm_summary_path?: string | null;
    /**
     * Extraction summary file path
     */
    extraction_summary_path?: string | null;
    content_type?: ContentTypeEnum;
    extraction_status?: ProcessingStatusEnum;
    /**
     * Processing duration (seconds)
     */
    processing_duration?: number | null;
    extraction_confidence?: number | null;
    llm_model_used?: string | null;
    /**
     * HTML file size (bytes)
     */
    html_file_size?: number | null;
    /**
     * JSON file size (bytes)
     */
    json_file_size?: number | null;
    extracted_text_length?: number | null;
    /**
     * Extracted analysis data
     * LLM-extracted and analyzed data in English
     */
    extracted_data?: unknown;
    /**
     * Extracted brand
     */
    vehicle_brand?: string | null;
    /**
     * Extracted model
     */
    vehicle_model?: string | null;
    /**
     * Extracted year
     */
    vehicle_year?: number | null;
    /**
     * Extracted price (만원)
     */
    vehicle_price?: number | null;
    /**
     * Extracted mileage (km)
     */
    vehicle_mileage?: number | null;
    /**
     * Has accident information
     */
    has_accident_info?: boolean;
    has_inspection_data?: boolean;
    /**
     * Has warranty information
     */
    has_warranty_info?: boolean;
    has_option_details?: boolean;
    data_completeness_score?: number | null;
    extraction_quality_score?: number | null;
    /**
     * Errors encountered during extraction
     */
    extraction_errors?: unknown;
    /**
     * Validation warnings for extracted data
     */
    validation_warnings?: unknown;
    /**
     * Extraction started
     */
    extraction_started_at?: string | null;
    /**
     * Extraction completed
     */
    extraction_completed_at?: string | null;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * * `excellent` - Excellent
 * * `very_good` - Very Good
 * * `good` - Good
 * * `fair` - Fair
 * * `poor` - Poor
 * * `salvage` - Salvage
 * * `flood` - Flood Damage
 * * `lemon` - Lemon
 * * `unknown` - Unknown
 */
export type InteriorConditionEnum = 'excellent' | 'very_good' | 'good' | 'fair' | 'poor' | 'salvage' | 'flood' | 'lemon' | 'unknown';

/**
 * * `A+` - A+ (Excellent)
 * * `A` - A (Very Good)
 * * `A-` - A- (Good Plus)
 * * `B+` - B+ (Good)
 * * `B` - B (Above Average)
 * * `B-` - B- (Average Plus)
 * * `C+` - C+ (Average)
 * * `C` - C (Below Average)
 * * `C-` - C- (Poor Plus)
 * * `D+` - D+ (Poor Plus)
 * * `D` - D (Poor)
 * * `D-` - D- (Very Poor)
 * * `F` - F (Avoid)
 */
export type InvestmentGradeEnum = 'A+' | 'A' | 'A-' | 'B+' | 'B' | 'B-' | 'C+' | 'C' | 'C-' | 'D+' | 'D' | 'D-' | 'F';

/**
 * Metadata serializer for V4 optimized model
 */
export type Metadata = {
    listing_id: string;
    data_source?: DataSourceEnum;
    original_url?: string | null;
    base_directory?: string | null;
    has_json_data?: boolean;
    /**
     * Has English JSON data
     */
    has_json_en_data?: boolean;
    has_text_analysis?: boolean;
    has_photos?: boolean;
    /**
     * Has metadata.json
     */
    has_car_info?: boolean;
    llm_analysis_status?: ProcessingStatusEnum;
    /**
     * LLM analysis started
     */
    llm_analysis_started_at?: string | null;
    /**
     * LLM analysis completed
     */
    llm_analysis_completed_at?: string | null;
    /**
     * LLM processing duration (seconds)
     */
    llm_processing_duration?: number | null;
    llm_confidence_score?: number | null;
    llm_model_used?: string | null;
    processing_status?: ProcessingStatusEnum;
    /**
     * Processing started
     */
    processing_started_at?: string | null;
    /**
     * Processing completed
     */
    processing_completed_at?: string | null;
    /**
     * Processing duration (seconds)
     */
    processing_duration?: number | null;
    total_files_count?: number;
    json_files_count?: number;
    photo_files_count?: number;
    /**
     * Total size (bytes)
     */
    total_size_bytes?: number;
    has_investment_grade?: boolean;
    has_risk_assessment?: boolean;
    investment_grade?: string | null;
    risk_level?: string | null;
    data_completeness_score?: number | null;
    extraction_quality_score?: number | null;
    /**
     * Errors encountered during processing
     */
    processing_errors?: unknown;
    /**
     * Validation warnings for processed data
     */
    validation_warnings?: unknown;
    /**
     * Additional metadata
     * Additional processing metadata
     */
    metadata_json?: unknown;
    /**
     * First seen
     */
    first_seen_at?: string | null;
    /**
     * Last updated
     */
    last_updated_at?: string | null;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * Vehicle model serializer
 */
export type Model = {
    /**
     * Model code
     */
    code: string;
    /**
     * Model name
     */
    name: string;
    slug: string;
    model_group: ModelGroup;
    grade_code?: string | null;
    grade_name?: string | null;
    grade_detail_code?: string | null;
    grade_detail_name?: string | null;
    /**
     * Production year-month
     */
    year_month?: string | null;
    form_year?: string | null;
    /**
     * Original price (만원)
     */
    origin_price?: number | null;
    jato_vehicle_id?: number | null;
    is_active?: boolean;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * Vehicle model group serializer
 */
export type ModelGroup = {
    /**
     * Model group code
     */
    code: string;
    /**
     * Model group name
     */
    name: string;
    slug: string;
    brand: Brand;
    is_active?: boolean;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * * `standard` - Standard
 * * `choice` - Choice
 * * `etc` - Etc
 * * `tuning` - Tuning
 */
export type OptionTypeEnum = 'standard' | 'choice' | 'etc' | 'tuning';

export type PaginatedBrandList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Brand>;
};

export type PaginatedHtmlAnalysisList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<HtmlAnalysis>;
};

export type PaginatedMetadataList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Metadata>;
};

export type PaginatedModelGroupList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<ModelGroup>;
};

export type PaginatedModelList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Model>;
};

export type PaginatedProcessedVehicleListList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<ProcessedVehicleList>;
};

export type PaginatedSourceDataList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SourceData>;
};

export type PaginatedVehicleOptionList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<VehicleOption>;
};

export type PaginatedVehiclePhotoList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<VehiclePhoto>;
};

export type PaginatedVehicleWebListList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<VehicleWebList>;
};

/**
 * * `exterior` - Exterior
 * * `interior` - Interior
 * * `engine` - Engine
 * * `trunk` - Trunk
 * * `wheel` - Wheel
 * * `dashboard` - Dashboard
 * * `seat` - Seat
 * * `damage` - Damage
 * * `document` - Document
 * * `inspection` - Inspection
 * * `other` - Other
 */
export type PhotoTypeEnum = 'exterior' | 'interior' | 'engine' | 'trunk' | 'wheel' | 'dashboard' | 'seat' | 'damage' | 'document' | 'inspection' | 'other';

/**
 * Detailed serializer with all nested relationships - V4 Updated
 */
export type ProcessedVehicleDetail = {
    listing_id: string;
    data_source?: DataSourceEnum;
    car_id?: string | null;
    brand: Brand;
    model_group: ModelGroup;
    vehicle_model: Model;
    /**
     * Get full model name with brand
     */
    readonly full_model_name: string;
    title?: string | null;
    description?: string | null;
    manufacturer?: string | null;
    model?: string | null;
    year?: number | null;
    /**
     * Price (만원)
     */
    price?: number;
    /**
     * Convert price from 만원 to KRW
     */
    readonly price_krw: number | null;
    /**
     * Original price (만원)
     */
    original_price?: number | null;
    /**
     * Discount (만원)
     */
    discount_amount?: number | null;
    /**
     * Mileage (km)
     */
    mileage?: number;
    /**
     * Engine (cc)
     */
    displacement?: number | null;
    fuel_type?: FuelTypeEnum | null;
    transmission?: TransmissionEnum | null;
    color?: ColorEnum | null;
    /**
     * Seats
     */
    seat_count?: number | null;
    body_type?: BodyTypeEnum | null;
    vin?: string | null;
    /**
     * License plate
     */
    vehicle_number?: string | null;
    region?: string | null;
    location?: string | null;
    dealer_name?: string | null;
    dealer_phone?: string | null;
    status?: StatusEnum;
    is_active?: boolean;
    /**
     * Pre-verified
     */
    is_verified?: boolean;
    /**
     * Diagnosis completed
     */
    is_diagnosis_completed?: boolean;
    /**
     * Home service available
     */
    has_home_service?: boolean;
    /**
     * Extended warranty
     */
    has_warranty?: boolean;
    /**
     * Processing date
     */
    processed_at?: string | null;
    investment_grade?: InvestmentGradeEnum | null;
    risk_level?: RiskLevelEnum | null;
    overall_condition?: string | null;
    recommended_action?: string | null;
    llm_confidence?: number | null;
    llm_quality_score?: number | null;
    llm_analysis_date?: string | null;
    /**
     * Get investment summary from LLM analysis
     */
    readonly investment_summary: {
        [key: string]: unknown;
    };
    /**
     * Check if vehicle has major issues
     */
    readonly has_major_issues: boolean;
    /**
     * Core vehicle data (English)
     */
    main_data?: unknown;
    /**
     * Complete LLM analysis
     */
    llm_analysis?: unknown;
    /**
     * Total accidents
     */
    accident_count?: number;
    owner_changes?: number;
    /**
     * Flood damage
     */
    has_flood_damage?: boolean;
    /**
     * Theft history
     */
    has_theft_history?: boolean;
    inspection_grade?: string | null;
    /**
     * Accident history
     */
    has_accident_history?: boolean;
    engine_condition?: string | null;
    transmission_condition?: string | null;
    readonly options: Array<VehicleOption>;
    readonly photos: Array<VehiclePhoto>;
    created_at?: string | null;
    readonly updated_at: string;
};

/**
 * Simplified serializer for vehicle list view with V4 features
 */
export type ProcessedVehicleList = {
    listing_id: string;
    data_source?: DataSourceEnum;
    car_id?: string | null;
    /**
     * Get main photo URL
     */
    readonly main_photo_url: string | null;
    brand: Brand;
    model_group: ModelGroup;
    vehicle_model: Model;
    year?: number | null;
    /**
     * Mileage (km)
     */
    mileage?: number;
    /**
     * Price (만원)
     */
    price?: number;
    /**
     * Convert price from 만원 to KRW
     */
    readonly price_krw: number | null;
    /**
     * Engine (cc)
     */
    displacement?: number | null;
    fuel_type?: FuelTypeEnum | null;
    transmission?: TransmissionEnum | null;
    color?: ColorEnum | null;
    /**
     * Seats
     */
    seat_count?: number | null;
    body_type?: BodyTypeEnum | null;
    location?: string | null;
    status?: StatusEnum;
    /**
     * Pre-verified
     */
    is_verified?: boolean;
    /**
     * Diagnosis completed
     */
    is_diagnosis_completed?: boolean;
    investment_grade?: InvestmentGradeEnum | null;
    risk_level?: RiskLevelEnum | null;
    overall_condition?: string | null;
    llm_confidence?: number | null;
    llm_analysis_date?: string | null;
    /**
     * Total accidents
     */
    accident_count?: number;
    owner_changes?: number;
    /**
     * Flood damage
     */
    has_flood_damage?: boolean;
    /**
     * Theft history
     */
    has_theft_history?: boolean;
    inspection_grade?: string | null;
    created_at?: string | null;
    readonly updated_at: string;
};

/**
 * * `pending` - Pending
 * * `processing` - Processing
 * * `completed` - Completed
 * * `failed` - Failed
 * * `partial` - Partial
 */
export type ProcessingStatusEnum = 'pending' | 'processing' | 'completed' | 'failed' | 'partial';

/**
 * * `very_low` - Very Low
 * * `low` - Low
 * * `medium` - Medium
 * * `high` - High
 * * `very_high` - Very High
 */
export type RiskLevelEnum = 'very_low' | 'low' | 'medium' | 'high' | 'very_high';

/**
 * Source data serializer for V4 optimized model
 */
export type SourceData = {
    listing_id: string;
    /**
     * Core vehicle data (English)
     * Essential vehicle information in English
     */
    main_data?: unknown;
    /**
     * Advertisement data (English)
     * Seller advertisement information in English
     */
    advertisement_data?: unknown;
    /**
     * Vehicle history (English)
     * Accident and ownership history in English
     */
    history_data?: unknown;
    /**
     * Inspection data (English)
     * Technical inspection results in English
     */
    inspection_data?: unknown;
    /**
     * Warranty data (English)
     * Warranty information in English
     */
    warranty_data?: unknown;
    /**
     * Selling points (English)
     * Key selling points in English
     */
    selling_points?: unknown;
    /**
     * Price (만원)
     */
    price?: number | null;
    year?: number | null;
    /**
     * Mileage (km)
     */
    mileage?: number | null;
    brand?: string | null;
    model?: string | null;
    accident_count?: number;
    has_accident_history?: boolean;
    /**
     * Flood damage
     */
    has_flood_damage?: boolean;
    /**
     * Theft history
     */
    has_theft_history?: boolean;
    owner_changes?: number;
    inspection_grade?: string | null;
    engine_condition?: EngineConditionEnum | null;
    transmission_condition?: TransmissionConditionEnum | null;
    exterior_condition?: ExteriorConditionEnum | null;
    interior_condition?: InteriorConditionEnum | null;
    warranty_type?: WarrantyTypeEnum | null;
    warranty_months?: number | null;
    /**
     * Warranty kilometers
     */
    warranty_km?: number | null;
    /**
     * Verified
     */
    is_verified?: boolean;
    /**
     * Diagnosis completed
     */
    is_diagnosis_completed?: boolean;
    /**
     * Home service
     */
    has_home_service?: boolean;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * * `active` - Active
 * * `sold` - Sold
 * * `reserved` - Reserved
 * * `inactive` - Inactive
 */
export type StatusEnum = 'active' | 'sold' | 'reserved' | 'inactive';

/**
 * * `excellent` - Excellent
 * * `very_good` - Very Good
 * * `good` - Good
 * * `fair` - Fair
 * * `poor` - Poor
 * * `salvage` - Salvage
 * * `flood` - Flood Damage
 * * `lemon` - Lemon
 * * `unknown` - Unknown
 */
export type TransmissionConditionEnum = 'excellent' | 'very_good' | 'good' | 'fair' | 'poor' | 'salvage' | 'flood' | 'lemon' | 'unknown';

/**
 * * `manual` - Manual
 * * `automatic` - Automatic
 * * `cvt` - CVT
 * * `semi_automatic` - Semi-Automatic
 * * `semi_auto` - Semi-Auto
 * * `dct` - DCT
 * * `other` - Other
 * * `unknown` - Unknown
 */
export type TransmissionEnum = 'manual' | 'automatic' | 'cvt' | 'semi_automatic' | 'semi_auto' | 'dct' | 'other' | 'unknown';

/**
 * Vehicle option serializer
 */
export type VehicleOption = {
    /**
     * Unique option code from the source data.
     */
    code: string;
    /**
     * Option name/description.
     */
    name: string;
    /**
     * Type of the option.
     *
     * * `standard` - Standard
     * * `choice` - Choice
     * * `etc` - Etc
     * * `tuning` - Tuning
     */
    option_type: OptionTypeEnum;
    /**
     * Price of the option, if available.
     */
    price?: number | null;
    /**
     * Detailed description of the option.
     */
    description?: string | null;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * Vehicle photo serializer
 */
export type VehiclePhoto = {
    readonly id: number;
    /**
     * Photo code
     */
    code: string;
    photo_type?: PhotoTypeEnum;
    description?: string | null;
    /**
     * Sequence
     */
    sequence_number?: number;
    url: string;
    file_name?: string | null;
    file_size?: number | null;
    width?: number | null;
    height?: number | null;
    /**
     * Main photo
     */
    is_main_photo?: boolean;
    readonly created_at: string;
    readonly updated_at: string;
};

/**
 * Web-optimized detail serializer with all necessary data
 */
export type VehicleWebDetail = {
    listing_id: string;
    car_id?: string | null;
    data_source?: DataSourceEnum;
    brand: Brand;
    model_group: ModelGroup;
    vehicle_model: Model;
    readonly brand_slug: string;
    readonly model_group_slug: string;
    readonly vehicle_model_slug: string;
    /**
     * Get full model name with brand
     */
    readonly full_model_name: string;
    year?: number | null;
    /**
     * Price (만원)
     */
    price?: number;
    /**
     * Convert price from 만원 to KRW
     */
    readonly price_krw: number | null;
    /**
     * Convert price from 만원 to USD (approximate exchange rate: 1 USD = 1300 KRW)
     */
    readonly price_usd: number | null;
    /**
     * Mileage (km)
     */
    mileage?: number;
    /**
     * Engine (cc)
     */
    displacement?: number | null;
    fuel_type?: FuelTypeEnum | null;
    transmission?: TransmissionEnum | null;
    color?: ColorEnum | null;
    body_type?: BodyTypeEnum | null;
    /**
     * Seats
     */
    seat_count?: number | null;
    location?: string | null;
    dealer_name?: string | null;
    main_photo: VehiclePhoto;
    investment_grade?: InvestmentGradeEnum | null;
    risk_level?: RiskLevelEnum | null;
    overall_condition?: string | null;
    llm_confidence?: number | null;
    llm_analysis_date?: string | null;
    readonly condition_summary: string;
    readonly photos_count: string;
    readonly options_count: string;
    readonly meta_title: string;
    readonly meta_description: string;
    status?: StatusEnum;
    /**
     * Pre-verified
     */
    is_verified?: boolean;
    /**
     * Diagnosis completed
     */
    is_diagnosis_completed?: boolean;
    created_at?: string | null;
    readonly updated_at: string;
};

/**
 * Simple serializer for web vehicle listing - optimized for performance
 */
export type VehicleWebList = {
    listing_id: string;
    car_id?: string | null;
    brand: Brand;
    model_group: ModelGroup;
    vehicle_model: Model;
    readonly brand_slug: string;
    readonly model_group_slug: string;
    readonly vehicle_model_slug: string;
    readonly title: string;
    year?: number | null;
    /**
     * Price (만원)
     */
    price?: number;
    /**
     * Convert price from 만원 to KRW
     */
    readonly price_krw: number | null;
    /**
     * Convert price from 만원 to USD (approximate exchange rate: 1 USD = 1300 KRW)
     */
    readonly price_usd: number | null;
    /**
     * Mileage (km)
     */
    mileage?: number;
    fuel_type?: FuelTypeEnum | null;
    transmission?: TransmissionEnum | null;
    color?: ColorEnum | null;
    location?: string | null;
    main_photo: VehiclePhoto;
    investment_grade?: InvestmentGradeEnum | null;
    risk_level?: RiskLevelEnum | null;
    /**
     * Pre-verified
     */
    is_verified?: boolean;
    /**
     * Total accidents
     */
    accident_count?: number;
    owner_changes?: number;
    status?: StatusEnum;
    created_at?: string | null;
};

/**
 * * `none` - No Warranty
 * * `manufacturer` - Manufacturer Warranty
 * * `extended` - Extended Warranty
 * * `dealer` - Dealer Warranty
 * * `third_party` - Third Party Warranty
 * * `limited` - Limited Warranty
 * * `full` - Full Warranty
 * * `powertrain` - Powertrain Warranty
 * * `bumper_to_bumper` - Bumper to Bumper
 * * `certified` - Certified Pre-Owned
 * * `as_is` - As-Is (No Warranty)
 * * `unknown` - Unknown
 */
export type WarrantyTypeEnum = 'none' | 'manufacturer' | 'extended' | 'dealer' | 'third_party' | 'limited' | 'full' | 'powertrain' | 'bumper_to_bumper' | 'certified' | 'as_is' | 'unknown';

export type DataEncarApiBrandsListData = {
    body?: never;
    path?: never;
    query?: {
        country_origin?: string;
        is_active?: boolean;
        is_domestic?: boolean;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/apix/data_encar_api/brands/';
};

export type DataEncarApiBrandsListResponses = {
    200: PaginatedBrandList;
};

export type DataEncarApiBrandsListResponse = DataEncarApiBrandsListResponses[keyof DataEncarApiBrandsListResponses];

export type DataEncarApiBrandsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Brand.
         */
        id: number;
    };
    query?: never;
    url: '/apix/data_encar_api/brands/{id}/';
};

export type DataEncarApiBrandsRetrieveResponses = {
    200: Brand;
};

export type DataEncarApiBrandsRetrieveResponse = DataEncarApiBrandsRetrieveResponses[keyof DataEncarApiBrandsRetrieveResponses];

export type DataEncarApiHtmlAnalysisListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * * `main_data` - Main Data
         * * `advertisement` - Advertisement
         * * `history` - History
         * * `inspection` - Inspection
         * * `warranty` - Warranty
         * * `options` - Options
         * * `photos` - Photos
         */
        content_type?: 'advertisement' | 'history' | 'inspection' | 'main_data' | 'options' | 'photos' | 'warranty';
        /**
         * * `pending` - Pending
         * * `processing` - Processing
         * * `completed` - Completed
         * * `failed` - Failed
         * * `partial` - Partial
         */
        extraction_status?: 'completed' | 'failed' | 'partial' | 'pending' | 'processing';
        has_accident_info?: boolean;
        has_inspection_data?: boolean;
        has_option_details?: boolean;
        has_warranty_info?: boolean;
        listing_id?: string;
        llm_model_used?: string;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        vehicle_brand?: string;
        vehicle_model?: string;
        vehicle_year?: number;
    };
    url: '/apix/data_encar_api/html-analysis/';
};

export type DataEncarApiHtmlAnalysisListResponses = {
    200: PaginatedHtmlAnalysisList;
};

export type DataEncarApiHtmlAnalysisListResponse = DataEncarApiHtmlAnalysisListResponses[keyof DataEncarApiHtmlAnalysisListResponses];

export type DataEncarApiHtmlAnalysisRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this HTML Analysis.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/html-analysis/{listing_id}/';
};

export type DataEncarApiHtmlAnalysisRetrieveResponses = {
    200: HtmlAnalysis;
};

export type DataEncarApiHtmlAnalysisRetrieveResponse = DataEncarApiHtmlAnalysisRetrieveResponses[keyof DataEncarApiHtmlAnalysisRetrieveResponses];

export type DataEncarApiMetadataListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * * `encar` - Encar
         * * `kcar` - K-Car
         * * `autowini` - Autowini
         */
        data_source?: 'autowini' | 'encar' | 'kcar';
        has_car_info?: boolean;
        has_investment_grade?: boolean;
        has_json_data?: boolean;
        has_json_en_data?: boolean;
        has_photos?: boolean;
        has_risk_assessment?: boolean;
        has_text_analysis?: boolean;
        investment_grade?: string;
        listing_id?: string;
        /**
         * * `pending` - Pending
         * * `processing` - Processing
         * * `completed` - Completed
         * * `failed` - Failed
         * * `partial` - Partial
         */
        llm_analysis_status?: 'completed' | 'failed' | 'partial' | 'pending' | 'processing';
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * * `pending` - Pending
         * * `processing` - Processing
         * * `completed` - Completed
         * * `failed` - Failed
         * * `partial` - Partial
         */
        processing_status?: 'completed' | 'failed' | 'partial' | 'pending' | 'processing';
        risk_level?: string;
    };
    url: '/apix/data_encar_api/metadata/';
};

export type DataEncarApiMetadataListResponses = {
    200: PaginatedMetadataList;
};

export type DataEncarApiMetadataListResponse = DataEncarApiMetadataListResponses[keyof DataEncarApiMetadataListResponses];

export type DataEncarApiMetadataRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Metadata.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/metadata/{listing_id}/';
};

export type DataEncarApiMetadataRetrieveResponses = {
    200: Metadata;
};

export type DataEncarApiMetadataRetrieveResponse = DataEncarApiMetadataRetrieveResponses[keyof DataEncarApiMetadataRetrieveResponses];

export type DataEncarApiModelGroupsListData = {
    body?: never;
    path?: never;
    query?: {
        brand__code?: string;
        brand__name?: string;
        is_active?: boolean;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/apix/data_encar_api/model-groups/';
};

export type DataEncarApiModelGroupsListResponses = {
    200: PaginatedModelGroupList;
};

export type DataEncarApiModelGroupsListResponse = DataEncarApiModelGroupsListResponses[keyof DataEncarApiModelGroupsListResponses];

export type DataEncarApiModelGroupsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Model Group.
         */
        id: number;
    };
    query?: never;
    url: '/apix/data_encar_api/model-groups/{id}/';
};

export type DataEncarApiModelGroupsRetrieveResponses = {
    200: ModelGroup;
};

export type DataEncarApiModelGroupsRetrieveResponse = DataEncarApiModelGroupsRetrieveResponses[keyof DataEncarApiModelGroupsRetrieveResponses];

export type DataEncarApiModelsListData = {
    body?: never;
    path?: never;
    query?: {
        form_year?: string;
        grade_code?: string;
        is_active?: boolean;
        model_group__brand__code?: string;
        model_group__code?: string;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/apix/data_encar_api/models/';
};

export type DataEncarApiModelsListResponses = {
    200: PaginatedModelList;
};

export type DataEncarApiModelsListResponse = DataEncarApiModelsListResponses[keyof DataEncarApiModelsListResponses];

export type DataEncarApiModelsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this Vehicle Model.
         */
        id: number;
    };
    query?: never;
    url: '/apix/data_encar_api/models/{id}/';
};

export type DataEncarApiModelsRetrieveResponses = {
    200: Model;
};

export type DataEncarApiModelsRetrieveResponse = DataEncarApiModelsRetrieveResponses[keyof DataEncarApiModelsRetrieveResponses];

export type DataEncarApiOptionsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Type of the option.
         *
         * * `standard` - Standard
         * * `choice` - Choice
         * * `etc` - Etc
         * * `tuning` - Tuning
         */
        option_type?: 'choice' | 'etc' | 'standard' | 'tuning';
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/apix/data_encar_api/options/';
};

export type DataEncarApiOptionsListResponses = {
    200: PaginatedVehicleOptionList;
};

export type DataEncarApiOptionsListResponse = DataEncarApiOptionsListResponses[keyof DataEncarApiOptionsListResponses];

export type DataEncarApiOptionsRetrieveData = {
    body?: never;
    path: {
        /**
         * Unique option code from the source data.
         */
        code: string;
    };
    query?: never;
    url: '/apix/data_encar_api/options/{code}/';
};

export type DataEncarApiOptionsRetrieveResponses = {
    200: VehicleOption;
};

export type DataEncarApiOptionsRetrieveResponse = DataEncarApiOptionsRetrieveResponses[keyof DataEncarApiOptionsRetrieveResponses];

export type DataEncarApiPhotosListData = {
    body?: never;
    path?: never;
    query?: {
        is_downloaded?: boolean;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * * `exterior` - Exterior
         * * `interior` - Interior
         * * `engine` - Engine
         * * `trunk` - Trunk
         * * `wheel` - Wheel
         * * `dashboard` - Dashboard
         * * `seat` - Seat
         * * `damage` - Damage
         * * `document` - Document
         * * `inspection` - Inspection
         * * `other` - Other
         */
        photo_type?: 'damage' | 'dashboard' | 'document' | 'engine' | 'exterior' | 'inspection' | 'interior' | 'other' | 'seat' | 'trunk' | 'wheel';
        vehicle__listing_id?: string;
    };
    url: '/apix/data_encar_api/photos/';
};

export type DataEncarApiPhotosListResponses = {
    200: PaginatedVehiclePhotoList;
};

export type DataEncarApiPhotosListResponse = DataEncarApiPhotosListResponses[keyof DataEncarApiPhotosListResponses];

export type DataEncarApiPhotosRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this vehicle photo.
         */
        id: number;
    };
    query?: never;
    url: '/apix/data_encar_api/photos/{id}/';
};

export type DataEncarApiPhotosRetrieveResponses = {
    200: VehiclePhoto;
};

export type DataEncarApiPhotosRetrieveResponse = DataEncarApiPhotosRetrieveResponses[keyof DataEncarApiPhotosRetrieveResponses];

export type DataEncarApiSourceDataListData = {
    body?: never;
    path?: never;
    query?: {
        accident_count?: number;
        brand?: string;
        has_accident_history?: boolean;
        has_flood_damage?: boolean;
        has_home_service?: boolean;
        has_theft_history?: boolean;
        inspection_grade?: string;
        is_diagnosis_completed?: boolean;
        is_verified?: boolean;
        listing_id?: string;
        mileage?: number;
        model?: string;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        owner_changes?: number;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        price?: number;
        year?: number;
    };
    url: '/apix/data_encar_api/source-data/';
};

export type DataEncarApiSourceDataListResponses = {
    200: PaginatedSourceDataList;
};

export type DataEncarApiSourceDataListResponse = DataEncarApiSourceDataListResponses[keyof DataEncarApiSourceDataListResponses];

export type DataEncarApiSourceDataRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Source Data.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/source-data/{listing_id}/';
};

export type DataEncarApiSourceDataRetrieveResponses = {
    200: SourceData;
};

export type DataEncarApiSourceDataRetrieveResponse = DataEncarApiSourceDataRetrieveResponses[keyof DataEncarApiSourceDataRetrieveResponses];

export type DataEncarApiVehiclesListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * * `sedan` - Sedan
         * * `hatchback` - Hatchback
         * * `coupe` - Coupe
         * * `convertible` - Convertible
         * * `suv` - SUV
         * * `wagon` - Wagon
         * * `pickup` - Pickup
         * * `van` - Van
         * * `minivan` - Minivan
         * * `crossover` - Crossover
         * * `crossroad` - Crossroad
         * * `roadster` - Roadster
         * * `limousine` - Limousine
         * * `truck` - Truck
         * * `bus` - Bus
         * * `other` - Other
         * * `unknown` - Unknown
         */
        body_type?: 'bus' | 'convertible' | 'coupe' | 'crossover' | 'crossroad' | 'hatchback' | 'limousine' | 'minivan' | 'other' | 'pickup' | 'roadster' | 'sedan' | 'suv' | 'truck' | 'unknown' | 'van' | 'wagon';
        brand__code?: string;
        brand__slug?: string;
        /**
         * * `white` - White
         * * `black` - Black
         * * `gray` - Gray
         * * `silver` - Silver
         * * `red` - Red
         * * `blue` - Blue
         * * `yellow` - Yellow
         * * `green` - Green
         * * `brown` - Brown
         * * `purple` - Purple
         * * `orange` - Orange
         * * `pink` - Pink
         * * `gold` - Gold
         * * `beige` - Beige
         * * `maroon` - Maroon
         * * `bronze` - Bronze
         * * `other` - Other
         * * `unknown` - Unknown
         */
        color?: 'beige' | 'black' | 'blue' | 'bronze' | 'brown' | 'gold' | 'gray' | 'green' | 'maroon' | 'orange' | 'other' | 'pink' | 'purple' | 'red' | 'silver' | 'unknown' | 'white' | 'yellow';
        /**
         * * `encar` - Encar
         * * `kcar` - K-Car
         * * `autowini` - Autowini
         */
        data_source?: 'autowini' | 'encar' | 'kcar';
        /**
         * * `gasoline` - Gasoline
         * * `diesel` - Diesel
         * * `hybrid` - Hybrid
         * * `plug_in_hybrid` - Plug-in Hybrid
         * * `electric` - Electric
         * * `hydrogen` - Hydrogen
         * * `cng` - CNG
         * * `lpg` - LPG
         * * `gasoline_electric` - Gasoline/Electric
         * * `diesel_electric` - Diesel/Electric
         * * `lpg_electric` - LPG/Electric
         * * `other` - Other
         * * `unknown` - Unknown
         */
        fuel_type?: 'cng' | 'diesel' | 'diesel_electric' | 'electric' | 'gasoline' | 'gasoline_electric' | 'hybrid' | 'hydrogen' | 'lpg' | 'lpg_electric' | 'other' | 'plug_in_hybrid' | 'unknown';
        /**
         * * `A+` - A+ (Excellent)
         * * `A` - A (Very Good)
         * * `A-` - A- (Good Plus)
         * * `B+` - B+ (Good)
         * * `B` - B (Above Average)
         * * `B-` - B- (Average Plus)
         * * `C+` - C+ (Average)
         * * `C` - C (Below Average)
         * * `C-` - C- (Poor Plus)
         * * `D+` - D+ (Poor Plus)
         * * `D` - D (Poor)
         * * `D-` - D- (Very Poor)
         * * `F` - F (Avoid)
         */
        investment_grade?: 'A' | 'A+' | 'A-' | 'B' | 'B+' | 'B-' | 'C' | 'C+' | 'C-' | 'D' | 'D+' | 'D-' | 'F';
        is_diagnosis_completed?: boolean;
        is_verified?: boolean;
        /**
         * Maximum mileage filter (in km)
         */
        mileage_max?: number;
        model_group__code?: string;
        model_group__slug?: string;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Maximum price filter (in 만원)
         */
        price_max?: number;
        /**
         * Minimum price filter (in 만원)
         */
        price_min?: number;
        /**
         * * `very_low` - Very Low
         * * `low` - Low
         * * `medium` - Medium
         * * `high` - High
         * * `very_high` - Very High
         */
        risk_level?: 'high' | 'low' | 'medium' | 'very_high' | 'very_low';
        /**
         * A search term.
         */
        search?: string;
        /**
         * * `active` - Active
         * * `sold` - Sold
         * * `reserved` - Reserved
         * * `inactive` - Inactive
         */
        status?: 'active' | 'inactive' | 'reserved' | 'sold';
        /**
         * * `manual` - Manual
         * * `automatic` - Automatic
         * * `cvt` - CVT
         * * `semi_automatic` - Semi-Automatic
         * * `semi_auto` - Semi-Auto
         * * `dct` - DCT
         * * `other` - Other
         * * `unknown` - Unknown
         */
        transmission?: 'automatic' | 'cvt' | 'dct' | 'manual' | 'other' | 'semi_auto' | 'semi_automatic' | 'unknown';
        vehicle_model__code?: string;
        vehicle_model__slug?: string;
        year?: number;
        /**
         * Maximum year filter
         */
        year_max?: number;
        /**
         * Minimum year filter
         */
        year_min?: number;
    };
    url: '/apix/data_encar_api/vehicles/';
};

export type DataEncarApiVehiclesListResponses = {
    200: PaginatedProcessedVehicleListList;
};

export type DataEncarApiVehiclesListResponse = DataEncarApiVehiclesListResponses[keyof DataEncarApiVehiclesListResponses];

export type DataEncarApiVehiclesWebListData = {
    body?: never;
    path?: never;
    query?: {
        accident_count?: number;
        brand_slug?: string;
        color?: string;
        fuel_type?: string;
        investment_grade?: string;
        is_verified?: boolean;
        location?: string;
        mileage_max?: number;
        model_group_slug?: string;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        owner_changes?: number;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        price_max?: number;
        price_min?: number;
        risk_level?: string;
        /**
         * A search term.
         */
        search?: string;
        transmission?: string;
        vehicle_model_slug?: string;
        year_max?: number;
        year_min?: number;
    };
    url: '/apix/data_encar_api/vehicles-web/';
};

export type DataEncarApiVehiclesWebListResponses = {
    200: PaginatedVehicleWebListList;
};

export type DataEncarApiVehiclesWebListResponse = DataEncarApiVehiclesWebListResponses[keyof DataEncarApiVehiclesWebListResponses];

export type DataEncarApiVehiclesWebRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles-web/{listing_id}/';
};

export type DataEncarApiVehiclesWebRetrieveResponses = {
    200: VehicleWebDetail;
};

export type DataEncarApiVehiclesWebRetrieveResponse = DataEncarApiVehiclesWebRetrieveResponses[keyof DataEncarApiVehiclesWebRetrieveResponses];

export type DataEncarApiVehiclesWebSimilarRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles-web/{listing_id}/similar/';
};

export type DataEncarApiVehiclesWebSimilarRetrieveResponses = {
    200: VehicleWebList;
};

export type DataEncarApiVehiclesWebSimilarRetrieveResponse = DataEncarApiVehiclesWebSimilarRetrieveResponses[keyof DataEncarApiVehiclesWebSimilarRetrieveResponses];

export type DataEncarApiVehiclesWebAvailabilityStatsRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/data_encar_api/vehicles-web/availability_stats/';
};

export type DataEncarApiVehiclesWebAvailabilityStatsRetrieveResponses = {
    200: VehicleWebList;
};

export type DataEncarApiVehiclesWebAvailabilityStatsRetrieveResponse = DataEncarApiVehiclesWebAvailabilityStatsRetrieveResponses[keyof DataEncarApiVehiclesWebAvailabilityStatsRetrieveResponses];

export type DataEncarApiVehiclesWebFeaturedRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/data_encar_api/vehicles-web/featured/';
};

export type DataEncarApiVehiclesWebFeaturedRetrieveResponses = {
    200: VehicleWebList;
};

export type DataEncarApiVehiclesWebFeaturedRetrieveResponse = DataEncarApiVehiclesWebFeaturedRetrieveResponses[keyof DataEncarApiVehiclesWebFeaturedRetrieveResponses];

export type DataEncarApiVehiclesWebFiltersRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/data_encar_api/vehicles-web/filters/';
};

export type DataEncarApiVehiclesWebFiltersRetrieveResponses = {
    200: VehicleWebList;
};

export type DataEncarApiVehiclesWebFiltersRetrieveResponse = DataEncarApiVehiclesWebFiltersRetrieveResponses[keyof DataEncarApiVehiclesWebFiltersRetrieveResponses];

export type DataEncarApiVehiclesWebPopularRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/data_encar_api/vehicles-web/popular/';
};

export type DataEncarApiVehiclesWebPopularRetrieveResponses = {
    200: VehicleWebList;
};

export type DataEncarApiVehiclesWebPopularRetrieveResponse = DataEncarApiVehiclesWebPopularRetrieveResponses[keyof DataEncarApiVehiclesWebPopularRetrieveResponses];

export type DataEncarApiVehiclesRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/';
};

export type DataEncarApiVehiclesRetrieveResponses = {
    200: ProcessedVehicleDetail;
};

export type DataEncarApiVehiclesRetrieveResponse = DataEncarApiVehiclesRetrieveResponses[keyof DataEncarApiVehiclesRetrieveResponses];

export type DataEncarApiVehiclesAccidentAnalysisRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/accident-analysis/';
};

export type DataEncarApiVehiclesAccidentAnalysisRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesAccidentAnalysisRetrieveResponse = DataEncarApiVehiclesAccidentAnalysisRetrieveResponses[keyof DataEncarApiVehiclesAccidentAnalysisRetrieveResponses];

export type DataEncarApiVehiclesDiagnosisAnalysisRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/diagnosis-analysis/';
};

export type DataEncarApiVehiclesDiagnosisAnalysisRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesDiagnosisAnalysisRetrieveResponse = DataEncarApiVehiclesDiagnosisAnalysisRetrieveResponses[keyof DataEncarApiVehiclesDiagnosisAnalysisRetrieveResponses];

export type DataEncarApiVehiclesHistoryRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/history/';
};

export type DataEncarApiVehiclesHistoryRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesHistoryRetrieveResponse = DataEncarApiVehiclesHistoryRetrieveResponses[keyof DataEncarApiVehiclesHistoryRetrieveResponses];

export type DataEncarApiVehiclesInspectionRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/inspection/';
};

export type DataEncarApiVehiclesInspectionRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesInspectionRetrieveResponse = DataEncarApiVehiclesInspectionRetrieveResponses[keyof DataEncarApiVehiclesInspectionRetrieveResponses];

export type DataEncarApiVehiclesInspectionAnalysisRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/inspection-analysis/';
};

export type DataEncarApiVehiclesInspectionAnalysisRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesInspectionAnalysisRetrieveResponse = DataEncarApiVehiclesInspectionAnalysisRetrieveResponses[keyof DataEncarApiVehiclesInspectionAnalysisRetrieveResponses];

export type DataEncarApiVehiclesLlmAnalysisRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/llm-analysis/';
};

export type DataEncarApiVehiclesLlmAnalysisRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesLlmAnalysisRetrieveResponse = DataEncarApiVehiclesLlmAnalysisRetrieveResponses[keyof DataEncarApiVehiclesLlmAnalysisRetrieveResponses];

export type DataEncarApiVehiclesMetadataRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/metadata/';
};

export type DataEncarApiVehiclesMetadataRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesMetadataRetrieveResponse = DataEncarApiVehiclesMetadataRetrieveResponses[keyof DataEncarApiVehiclesMetadataRetrieveResponses];

export type DataEncarApiVehiclesOptionsListData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: {
        /**
         * * `sedan` - Sedan
         * * `hatchback` - Hatchback
         * * `coupe` - Coupe
         * * `convertible` - Convertible
         * * `suv` - SUV
         * * `wagon` - Wagon
         * * `pickup` - Pickup
         * * `van` - Van
         * * `minivan` - Minivan
         * * `crossover` - Crossover
         * * `crossroad` - Crossroad
         * * `roadster` - Roadster
         * * `limousine` - Limousine
         * * `truck` - Truck
         * * `bus` - Bus
         * * `other` - Other
         * * `unknown` - Unknown
         */
        body_type?: 'bus' | 'convertible' | 'coupe' | 'crossover' | 'crossroad' | 'hatchback' | 'limousine' | 'minivan' | 'other' | 'pickup' | 'roadster' | 'sedan' | 'suv' | 'truck' | 'unknown' | 'van' | 'wagon';
        brand__code?: string;
        brand__slug?: string;
        /**
         * * `white` - White
         * * `black` - Black
         * * `gray` - Gray
         * * `silver` - Silver
         * * `red` - Red
         * * `blue` - Blue
         * * `yellow` - Yellow
         * * `green` - Green
         * * `brown` - Brown
         * * `purple` - Purple
         * * `orange` - Orange
         * * `pink` - Pink
         * * `gold` - Gold
         * * `beige` - Beige
         * * `maroon` - Maroon
         * * `bronze` - Bronze
         * * `other` - Other
         * * `unknown` - Unknown
         */
        color?: 'beige' | 'black' | 'blue' | 'bronze' | 'brown' | 'gold' | 'gray' | 'green' | 'maroon' | 'orange' | 'other' | 'pink' | 'purple' | 'red' | 'silver' | 'unknown' | 'white' | 'yellow';
        /**
         * * `encar` - Encar
         * * `kcar` - K-Car
         * * `autowini` - Autowini
         */
        data_source?: 'autowini' | 'encar' | 'kcar';
        /**
         * * `gasoline` - Gasoline
         * * `diesel` - Diesel
         * * `hybrid` - Hybrid
         * * `plug_in_hybrid` - Plug-in Hybrid
         * * `electric` - Electric
         * * `hydrogen` - Hydrogen
         * * `cng` - CNG
         * * `lpg` - LPG
         * * `gasoline_electric` - Gasoline/Electric
         * * `diesel_electric` - Diesel/Electric
         * * `lpg_electric` - LPG/Electric
         * * `other` - Other
         * * `unknown` - Unknown
         */
        fuel_type?: 'cng' | 'diesel' | 'diesel_electric' | 'electric' | 'gasoline' | 'gasoline_electric' | 'hybrid' | 'hydrogen' | 'lpg' | 'lpg_electric' | 'other' | 'plug_in_hybrid' | 'unknown';
        /**
         * * `A+` - A+ (Excellent)
         * * `A` - A (Very Good)
         * * `A-` - A- (Good Plus)
         * * `B+` - B+ (Good)
         * * `B` - B (Above Average)
         * * `B-` - B- (Average Plus)
         * * `C+` - C+ (Average)
         * * `C` - C (Below Average)
         * * `C-` - C- (Poor Plus)
         * * `D+` - D+ (Poor Plus)
         * * `D` - D (Poor)
         * * `D-` - D- (Very Poor)
         * * `F` - F (Avoid)
         */
        investment_grade?: 'A' | 'A+' | 'A-' | 'B' | 'B+' | 'B-' | 'C' | 'C+' | 'C-' | 'D' | 'D+' | 'D-' | 'F';
        is_diagnosis_completed?: boolean;
        is_verified?: boolean;
        model_group__code?: string;
        model_group__slug?: string;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * * `very_low` - Very Low
         * * `low` - Low
         * * `medium` - Medium
         * * `high` - High
         * * `very_high` - Very High
         */
        risk_level?: 'high' | 'low' | 'medium' | 'very_high' | 'very_low';
        /**
         * A search term.
         */
        search?: string;
        /**
         * * `active` - Active
         * * `sold` - Sold
         * * `reserved` - Reserved
         * * `inactive` - Inactive
         */
        status?: 'active' | 'inactive' | 'reserved' | 'sold';
        /**
         * * `manual` - Manual
         * * `automatic` - Automatic
         * * `cvt` - CVT
         * * `semi_automatic` - Semi-Automatic
         * * `semi_auto` - Semi-Auto
         * * `dct` - DCT
         * * `other` - Other
         * * `unknown` - Unknown
         */
        transmission?: 'automatic' | 'cvt' | 'dct' | 'manual' | 'other' | 'semi_auto' | 'semi_automatic' | 'unknown';
        vehicle_model__code?: string;
        vehicle_model__slug?: string;
        year?: number;
    };
    url: '/apix/data_encar_api/vehicles/{listing_id}/options/';
};

export type DataEncarApiVehiclesOptionsListResponses = {
    200: PaginatedVehicleOptionList;
};

export type DataEncarApiVehiclesOptionsListResponse = DataEncarApiVehiclesOptionsListResponses[keyof DataEncarApiVehiclesOptionsListResponses];

export type DataEncarApiVehiclesPhotosListData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: {
        /**
         * * `sedan` - Sedan
         * * `hatchback` - Hatchback
         * * `coupe` - Coupe
         * * `convertible` - Convertible
         * * `suv` - SUV
         * * `wagon` - Wagon
         * * `pickup` - Pickup
         * * `van` - Van
         * * `minivan` - Minivan
         * * `crossover` - Crossover
         * * `crossroad` - Crossroad
         * * `roadster` - Roadster
         * * `limousine` - Limousine
         * * `truck` - Truck
         * * `bus` - Bus
         * * `other` - Other
         * * `unknown` - Unknown
         */
        body_type?: 'bus' | 'convertible' | 'coupe' | 'crossover' | 'crossroad' | 'hatchback' | 'limousine' | 'minivan' | 'other' | 'pickup' | 'roadster' | 'sedan' | 'suv' | 'truck' | 'unknown' | 'van' | 'wagon';
        brand__code?: string;
        brand__slug?: string;
        /**
         * * `white` - White
         * * `black` - Black
         * * `gray` - Gray
         * * `silver` - Silver
         * * `red` - Red
         * * `blue` - Blue
         * * `yellow` - Yellow
         * * `green` - Green
         * * `brown` - Brown
         * * `purple` - Purple
         * * `orange` - Orange
         * * `pink` - Pink
         * * `gold` - Gold
         * * `beige` - Beige
         * * `maroon` - Maroon
         * * `bronze` - Bronze
         * * `other` - Other
         * * `unknown` - Unknown
         */
        color?: 'beige' | 'black' | 'blue' | 'bronze' | 'brown' | 'gold' | 'gray' | 'green' | 'maroon' | 'orange' | 'other' | 'pink' | 'purple' | 'red' | 'silver' | 'unknown' | 'white' | 'yellow';
        /**
         * * `encar` - Encar
         * * `kcar` - K-Car
         * * `autowini` - Autowini
         */
        data_source?: 'autowini' | 'encar' | 'kcar';
        /**
         * * `gasoline` - Gasoline
         * * `diesel` - Diesel
         * * `hybrid` - Hybrid
         * * `plug_in_hybrid` - Plug-in Hybrid
         * * `electric` - Electric
         * * `hydrogen` - Hydrogen
         * * `cng` - CNG
         * * `lpg` - LPG
         * * `gasoline_electric` - Gasoline/Electric
         * * `diesel_electric` - Diesel/Electric
         * * `lpg_electric` - LPG/Electric
         * * `other` - Other
         * * `unknown` - Unknown
         */
        fuel_type?: 'cng' | 'diesel' | 'diesel_electric' | 'electric' | 'gasoline' | 'gasoline_electric' | 'hybrid' | 'hydrogen' | 'lpg' | 'lpg_electric' | 'other' | 'plug_in_hybrid' | 'unknown';
        /**
         * * `A+` - A+ (Excellent)
         * * `A` - A (Very Good)
         * * `A-` - A- (Good Plus)
         * * `B+` - B+ (Good)
         * * `B` - B (Above Average)
         * * `B-` - B- (Average Plus)
         * * `C+` - C+ (Average)
         * * `C` - C (Below Average)
         * * `C-` - C- (Poor Plus)
         * * `D+` - D+ (Poor Plus)
         * * `D` - D (Poor)
         * * `D-` - D- (Very Poor)
         * * `F` - F (Avoid)
         */
        investment_grade?: 'A' | 'A+' | 'A-' | 'B' | 'B+' | 'B-' | 'C' | 'C+' | 'C-' | 'D' | 'D+' | 'D-' | 'F';
        is_diagnosis_completed?: boolean;
        is_verified?: boolean;
        model_group__code?: string;
        model_group__slug?: string;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * * `very_low` - Very Low
         * * `low` - Low
         * * `medium` - Medium
         * * `high` - High
         * * `very_high` - Very High
         */
        risk_level?: 'high' | 'low' | 'medium' | 'very_high' | 'very_low';
        /**
         * A search term.
         */
        search?: string;
        /**
         * * `active` - Active
         * * `sold` - Sold
         * * `reserved` - Reserved
         * * `inactive` - Inactive
         */
        status?: 'active' | 'inactive' | 'reserved' | 'sold';
        /**
         * * `manual` - Manual
         * * `automatic` - Automatic
         * * `cvt` - CVT
         * * `semi_automatic` - Semi-Automatic
         * * `semi_auto` - Semi-Auto
         * * `dct` - DCT
         * * `other` - Other
         * * `unknown` - Unknown
         */
        transmission?: 'automatic' | 'cvt' | 'dct' | 'manual' | 'other' | 'semi_auto' | 'semi_automatic' | 'unknown';
        vehicle_model__code?: string;
        vehicle_model__slug?: string;
        year?: number;
    };
    url: '/apix/data_encar_api/vehicles/{listing_id}/photos/';
};

export type DataEncarApiVehiclesPhotosListResponses = {
    200: PaginatedVehiclePhotoList;
};

export type DataEncarApiVehiclesPhotosListResponse = DataEncarApiVehiclesPhotosListResponses[keyof DataEncarApiVehiclesPhotosListResponses];

export type DataEncarApiVehiclesSellingPointsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/selling-points/';
};

export type DataEncarApiVehiclesSellingPointsRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesSellingPointsRetrieveResponse = DataEncarApiVehiclesSellingPointsRetrieveResponses[keyof DataEncarApiVehiclesSellingPointsRetrieveResponses];

export type DataEncarApiVehiclesSummaryRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/summary/';
};

export type DataEncarApiVehiclesSummaryRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesSummaryRetrieveResponse = DataEncarApiVehiclesSummaryRetrieveResponses[keyof DataEncarApiVehiclesSummaryRetrieveResponses];

export type DataEncarApiVehiclesWarrantyRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this Processed Vehicle.
         */
        listing_id: string;
    };
    query?: never;
    url: '/apix/data_encar_api/vehicles/{listing_id}/warranty/';
};

export type DataEncarApiVehiclesWarrantyRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type DataEncarApiVehiclesWarrantyRetrieveResponse = DataEncarApiVehiclesWarrantyRetrieveResponses[keyof DataEncarApiVehiclesWarrantyRetrieveResponses];

export type DataEncarApiVehiclesAvailabilityStatsRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/apix/data_encar_api/vehicles/availability-stats/';
};

export type DataEncarApiVehiclesAvailabilityStatsRetrieveResponses = {
    200: AvailabilityStats;
};

export type DataEncarApiVehiclesAvailabilityStatsRetrieveResponse = DataEncarApiVehiclesAvailabilityStatsRetrieveResponses[keyof DataEncarApiVehiclesAvailabilityStatsRetrieveResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};